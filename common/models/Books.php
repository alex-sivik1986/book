<?php

namespace common\models;

use common\models\Author;
use common\models\Janr;
use Yii;
use yii\behaviors\AttributeBehavior;
use yii\helpers\FileHelper;

/**
 * This is the model class for table "books".
 *
 * @property int $id
 * @property string $name
 * @property string|null $description
 * @property int $author_id
 * @property string|null $release
 * @property int|null $created_at
 * @property int|null $updated_at
 *
 * @property Author $author
 * @property BooksJanr[] $booksJanrs
 * @property Janr[] $janrs
 */
class Books extends \yii\db\ActiveRecord
{
    public $janrs_book;
    public $data_image;
    const BOOK_SHOW_IN_PAGE = [16 => 16, 32 => 32, 48 => 48];

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    \yii\db\ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    \yii\db\ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
            'attribute' => [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    \yii\db\ActiveRecord::EVENT_BEFORE_INSERT => 'release',
                    \yii\db\ActiveRecord::EVENT_BEFORE_UPDATE => 'release',
                ],
                'value' => function ($event) {
                    return date('Y-m-d', strtotime($this->release));
                },
            ],
        ];
    }
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'books';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'author_id'], 'required'],
            [['author_id', 'created_at', 'updated_at'], 'integer'],
            [['name', 'description'], 'string', 'max' => 64],
            ['preview', 'string'],
            ['data_image', 'image','extensions' => ['jpg', 'jpeg', 'png', 'gif'],'checkExtensionByMimeType' => true],
            [['release', 'janrs_book'], 'safe'],
            [['author_id'], 'exist', 'skipOnError' => true, 'targetClass' => Author::class, 'targetAttribute' => ['author_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Назва',
            'description' => 'Опис',
            'author_id' => 'Автор',
            'preview' => 'Обкладинка',
            'release' => 'Друк',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * Gets query for [[Author]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getAuthor()
    {
        return $this->hasOne(Author::class, ['id' => 'author_id']);
    }

    /**
     * Gets query for [[BooksJanrs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBooksJanrs()
    {
        return $this->hasMany(BooksJanr::class, ['books_id' => 'id']);
    }

    /**
     * Gets query for [[Janrs]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getJanrs()
    {
        return $this->hasMany(Janr::class, ['id' => 'janr_id'])->viaTable('books_janr', ['books_id' => 'id']);
    }

    public function upload($id)
    {
        if($this->validate() && $this->data_image)
        {
            $path = $_SERVER['DOCUMENT_ROOT'].'/frontend/web/uploads/'. $id . '/';
            FileHelper::createDirectory($path);
            $this->data_image->saveAs($path . $this->data_image->baseName . '.' . $this->data_image->extension);
            return true;
        } else {
            return false;
        }
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        $this->janrs_book = $this->janrs;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
     //   $preJanr = array_column($this->getJanrs()->select(['id','id'])->asArray()->all(), 'id');
        if(is_array($this->janrs_book)) {
            BooksJanr::deleteAll(['books_id' => $this->id]);
            foreach ($this->janrs_book as $item) {
                $book_janr = new BooksJanr();
                $book_janr->books_id = $this->id;
                $book_janr->janr_id = $item;
                $book_janr->save();
            }
        }
    }
}
